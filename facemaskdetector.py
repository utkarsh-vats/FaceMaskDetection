# -*- coding: utf-8 -*-
"""FaceMaskDetector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q9qMJU6vb939aQOrDA2HhJcEwTGftu0A

Mounting at google drive for dataset and test images
"""

from google.colab import drive
drive.mount("/content/drive")

"""Importing necessary modules"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Dropout, Flatten, Dense, Input
from tensorflow.keras.models import Model
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array, load_img
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelBinarizer
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np
import argparse
import os
import cv2
from google.colab.patches import cv2_imshow

"""Stored the path to training and testing dataset and created a list of paths to all images"""

path = "/content/drive/My Drive/AI-MINOR-JUNE/dataset/"
imagePaths = list(paths.list_images(path))
images = []
labels = []

"""Preprocessing all dataset images and storing them as numpy arrays"""

for imagePath in imagePaths:
    label = imagePath.split(os.path.sep)[-2]
    image = load_img(imagePath, target_size=(224, 224))
    image = img_to_array(image)
    image = preprocess_input(image)
    images.append(image)
    labels.append(label)
images = np.array(images, dtype="float32")
labels = np.array(labels)

# print(images.shape)
# print(labels.shape)

np.unique(labels)

lb = LabelBinarizer()
labels = lb.fit_transform(labels)
labels = to_categorical(labels)

"""Train-Test Split"""

X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, stratify = labels)

datagen = ImageDataGenerator(rotation_range = 20,
                             zoom_range = 0.15,
                             width_shift_range = 0.2,
                             height_shift_range = 0.2,
                             shear_range = 0.15,
                             horizontal_flip = True,
                             fill_mode = "nearest")

baseModel = MobileNetV2(weights="imagenet", include_top = False,
                        input_tensor = Input(shape=(224, 224, 3)))
X = baseModel.output
X = AveragePooling2D(pool_size = (7, 7))(X)
X = Flatten()(X)
X = Dense(128, activation="relu")(X)
X = Dropout(0.5)(X)
X = Dense(2, activation="softmax")(X)
model = Model(inputs = baseModel.input, outputs = X)

for layer in baseModel.layers:
	layer.trainable = False

batch_size = 128
epochs = 15

"""Compiling the model using "adam" as optimizer"""

model.compile(loss="binary_crossentropy", optimizer="adam", metrics=["accuracy"])

"""Training and Validating the model"""

hist = model.fit(datagen.flow(X_train, y_train, batch_size=batch_size),
                 steps_per_epoch = len(X_train) // batch_size,
                 validation_data = (X_test, y_test),
                 validation_steps = len(X_test) // batch_size,
                 epochs = epochs)

"""testing the model predictions on Test set"""

y_pred = model.predict(X_test, batch_size=batch_size)
y_pred = np.argmax(y_pred, axis = 1)
print(classification_report(y_test.argmax(axis=1), y_pred, 
                            target_names=lb.classes_))

"""Loss-Epoch Plot"""

plt.plot(np.arange(0, epochs), hist.history["loss"], label="train_loss")
plt.plot(np.arange(0, epochs), hist.history["val_loss"], label="val_loss")
plt.title("Training and Validation Loss")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend(loc="upper right")

"""Accuracy-Epoch Plot"""

plt.plot(np.arange(0, epochs), hist.history["accuracy"], label="train_accuracy")
plt.plot(np.arange(0, epochs), hist.history["val_accuracy"], label="val_accuracy")
plt.title("Training and Validation Accuracy")
plt.xlabel("Epochs")
plt.ylabel("accuracy")
plt.legend(loc="lower right")

"""Saving the model for future use"""

model.save("model", save_format="h5")

testPath = "/content/drive/My Drive/AI-MINOR-JUNE/test/"
testImagePaths = list(paths.list_images(testPath))
testImages = []

"""Using "haarcascade frontalface" pretrained face detection model for detecting face area"""

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

"""Analysing the test examples and displaying the results using openCV"""

for testImagePath in testImagePaths:
    img = cv2.imread(testImagePath)
    img2 = load_img(testImagePath, target_size=(224, 224))
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    img2 = img_to_array(img2)
    img2 = preprocess_input(img2)
    img2 = np.expand_dims(img2, axis=0)
    (mask, withoutMask) = model.predict(img2)[0]

    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    color = (0, 0, 255)
    label = "No Mask"
    if mask > withoutMask:
        color = (0, 255, 0)
        label = "Mask"

    label = "{}: {:.2f}%".format(label, max(mask, withoutMask) * 100)
    for (x, y, w, h) in faces:
        cv2.putText(img, label, (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.45, color, 2)
        img = cv2.rectangle(img, (x, y), (x+w, y+h), color, 2)
    # img = cv2.resize(img, (224, 224))
    cv2_imshow(img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

